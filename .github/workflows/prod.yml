# on:
#   push:
#     branches:
#       -

# env:
#   ECR_REGISTRY: 221254266614.dkr.ecr.us-east-1.amazonaws.com
#   IMAGE_NAME: user-reg-backend
#   FUNCTION_NAME: test-function-user-reg

# jobs:
#   deploy:
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v2

#       - name: Set up Python 3.9
#         uses: actions/setup-python@v2
#         with:
#           python-version: '3.9'

#       - name: Install Python prerequisites
#         run: |
#           pip install virtualenv
#           virtualenv .env
#           source .env/bin/activate
#           pip install --upgrade pip setuptools wheel
#           pip install -r backend/requirements.txt
#         shell: bash

#       - name: Install Node.js
#         uses: actions/setup-node@v2
#         with:
#           node-version: '16'

#       - name: Install dependencies for React app
#         run: |
#           cd frontend
#           npm install

#       - name: Create .env file for React
#         run: |
#           cd frontend
#           touch .env.local
#           # echo REACT_APP_API_URL="https://nga6lztzn8.execute-api.us-east-2.amazonaws.com/_api/v1" >> .env.local
#           echo DISABLE_ESLINT_PLUGIN=true >> .env.local
#           # echo REACT_APP_S3_BUCKET="wildtrack-user-registration-dev" >> .env.local
#           echo REACT_APP_S3_REGION="us-east-1" >> .env.local
#           # cat .env.local
#           # rm .env.development

#       - name: Run build and tests for React app
#         run: |
#           cd frontend
#           npm install
#           npm install -g uuid
#           npm run build

#       # - name: Move React build content to root folder
#       #   run: mv ./frontend/build/* .

#       - name: Configure AWS Credentials
#         uses: aws-actions/configure-aws-credentials@v1
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: us-east-1

#       - name: Deploy to S3 bucket
#         run: aws s3 sync ./frontend/build/ s3://wildtrack-user-registration-dev --delete

#       - name: Login to Amazon ECR
#         id: login-ecr
#         uses: aws-actions/amazon-ecr-login@v1

#       - name: Build, tag, and push image to Amazon ECR
#         id: build-image
#         env:
#           BRANCH_TAG: NDP-lambda
#           ECR_REGISTRY: ${{ env.ECR_REGISTRY }}
#           IMAGE_NAME: ${{ env.IMAGE_NAME }}
#         run: |
#           docker build -t $IMAGE_NAME:$BRANCH_TAG ./backend
#           docker tag $IMAGE_NAME:$BRANCH_TAG $ECR_REGISTRY/$IMAGE_NAME:$BRANCH_TAG
#           docker push $ECR_REGISTRY/$IMAGE_NAME:$BRANCH_TAG
#           echo "::set-output name=image::$ECR_REGISTRY/$IMAGE_NAME:$BRANCH_TAG"

#       - name: Install Serverless Framework
#         run: |
#           cd backend
#           npm install -g serverless
#           serverless plugin install -n serverless-python-requirements
#           serverless plugin install -n serverless-wsgi

#       - name: Deploy to AWS Lambda
#         env:
#           SERVERLESS_ACCESS_KEY: ${{ secrets.DEV_SERVERLESS_ACCESS_KEY }}
#           AWS_S3_BUCKET: 'wildtrack-user-registration-dev'
#           # DB_NAME: 'mediamanagement'
#           # DB_LOCAL: ${{ secrets.DEV_DB_CONNECTION_STR }}
#           AWS_S3_BUCKET_STATIC_SITE: 'wildtrack-user-registration-dev'
#           CONTAINER_IMAGE_NAME: $IMAGE_NAME:$BRANCH_TAG
#         run: |
#           cd backend
#           echo $CONTAINER_IMAGE_URL
#           echo $AWS_S3_BUCKET
#           # echo $DB_NAME
#           serverless deploy --stage dev
#       # - name: Checking out code
#       #   uses: actions/checkout@v3
#       # - name: Installing Node.js
#       #   uses: actions/setup-node@v3
#       # with:
#       #   node-version: "16"
#       # - name: Installing dependencies
#       #   run: npm install
#       # - name: Configure AWS Credentials
#       #   uses: aws-actions/configure-aws-credentials@v1
#       #   with:
#       #     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#       #     aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#       #     aws-region: us-east-1
