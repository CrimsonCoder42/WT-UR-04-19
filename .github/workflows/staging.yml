# name: Dev - Build and Test Media Management microservice and then deploy to AWS Lambda

# # on:
# #   workflow_dispatch:

# on:
#   push:
#     branches:
#       - NDP-lambda
# # Define environment variables
# env:
#   ECR_REGISTRY: 221254266614.dkr.ecr.us-east-1.amazonaws.com
#   IMAGE_NAME: user-reg-backend
#   FUNCTION_NAME: test-function-user-reg

# # Define the deploy job
# jobs:
#   deploy:
#     runs-on: ubuntu-latest
#     steps:
#        # Checkout code from the repository
#       - uses: actions/checkout@v2
#       # Set up Python 3.9
#       - name: Set up Python 3.9
#         uses: actions/setup-python@v4
#         with:
#           python-version: '3.9'

#       # Install Python prerequisites
#       - name: Set up Python 3.9
#         uses: actions/setup-python@v4
#         with:
#           python-version: '3.9'

#       - name: Install Python prerequisites
#         run: |
#           pip install virtualenv
#           virtualenv .env
#           source .env/bin/activate
#           python -m pip install --upgrade pip setuptools wheel
#           pip install -r requirements.txt
#         shell: bash
#       # Install pytest, run and generate report
#       - name: Install pytest, run and generate report
#         run: |
#           pip install pytest
#           pip install pytest-html
#           pytest --html=report.html *_tests.py
#         working-directory: ./api_tests/unit
#         continue-on-error: false

#       # Publish report artifact

#       - name: Publish report artifact
#         uses: actions/upload-artifact@v2
#         with:
#           name: Test Report
#           path: ./api_tests/unit
#       # Install Node.js

#       - name: Install Node.js
#         uses: actions/setup-node@v2.1.5
#         with:
#           node-version: '16'
#       # Install dependencies for React app

#       - name: Install dependencies for React app
#         run:
#           npm install
#         working-directory: ./frontend

#         # Create .env file for React
#       - name: 'Create .env file for React'
#         run: |
#           touch .env.local
#           echo REACT_APP_API_URL="https://nga6lztzn8.execute-api.us-east-2.amazonaws.com/_api/v1" >> .env.local
#           echo REACT_APP_S3_BUCKET="wildtrack-user-registration-dev" >> .env.local
#           echo REACT_APP_S3_REGION="us-east-1" >> .env.local
#           cat .env.local
#           rm .env.development
#         working-directory: ./frontend

#         # Run build and tests for React app
#       - name: Run build and tests for React app
#         run: |
#           npm install
#           npm install -g uuid
#           npm run build
#         working-directory: ./frontend

#       - name: Move React build content to root folder
#         run: mv ./frontend/build/* .
#       #Checkout code from the repository
#       - name: Checkout
#         uses: actions/checkout@v2
#       #Configure AWS Credentials
#       - name: Configure AWS Credentials
#         uses: aws-actions/configure-aws-credentials@v1
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#       #Login to Amazon ECR
#       - name: Login to Amazon ECR
#         id: login-ecr
#         uses: aws-actions/amazon-ecr-login@v1
#       #Build, tag, and push the Docker image to Amazon ECR
#       - name: Build, tag, and push image to Amazon ECR
#         id: build-image
#         env:
#           BRANCH_TAG: dev
#           ECR_REGISTRY: ${{ env.ECR_REGISTRY }}
#           IMAGE_NAME: ${{ env.IMAGE_NAME }}
#         run: |# Build, tag, and push image to Amazon ECR
#           docker build -t $IMAGE_NAME:$BRANCH_TAG .
#           docker tag $IMAGE_NAME:$BRANCH_TAG $ECR_REGISTRY/$IMAGE_NAME:$BRANCH_TAG
#           docker push $ECR_REGISTRY/$IMAGE_NAME:$BRANCH_TAG
#           echo "::set-output name=image::$ECR_REGISTRY/$IMAGE_NAME:$BRANCH_TAG"
#       - name: Install Serverless Framework
#         run: |
#           npm install -g serverless
#           serverless plugin install -n serverless-python-requirements
#           serverless plugin install -n serverless-wsgi

#       - name: Deploy to AWS Lambda
#         env:
#           SERVERLESS_ACCESS_KEY: ${{ secrets.DEV_SERVERLESS_ACCESS_KEY }}
#           AWS_S3_BUCKET: "wildtrack-user-registration-dev"
#           #DB_NAME: <need out DB name>
#           #DB_LOCAL: ${{ secrets.DEV_DB_CONNECTION_STR }}
#         run: |
#           echo $AWS_S3_BUCKET
#           echo $DB_NAME
#           serverless deploy --stage dev
